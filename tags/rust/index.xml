<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rust on QuarticCat&#39;s Blog</title>
    <link>https://blog.quarticcat.com/tags/rust/</link>
    <description>Recent content in Rust on QuarticCat&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 02 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.quarticcat.com/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>No more OOM in C/C&#43;&#43;/Rust builds</title>
      <link>https://blog.quarticcat.com/posts/no-more-oom/</link>
      <pubDate>Tue, 02 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.quarticcat.com/posts/no-more-oom/</guid>
      <description>I&amp;rsquo;ve seen people complaining about some gigantic C/C++/Rust projects engulfing all of their memory during building from time to time. Fortunately, there are a few simple methods to alleviate the pain without sacrificing speed. By &amp;ldquo;simple,&amp;rdquo; I mean you don&amp;rsquo;t have to modify your code!
Root of the problem Usually, the most memory-consuming part of C/C++/Rust builds is the linking phase. To link object files, the linker must read all of them into memory.</description>
    </item>
    <item>
      <title>How do I boost difftastic by 4x</title>
      <link>https://blog.quarticcat.com/posts/optimize-difftastic/</link>
      <pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.quarticcat.com/posts/optimize-difftastic/</guid>
      <description>Difftastic is a structural diff that understands syntax. The diff results it generates are very fancy, but its performance is poor, and it consumes a lot of memory. Recently, I boosted it by 4x while using only 23% of memory (#393, #395, #401). This post explains how I accomplished this. Hope it can bring you some inspiration.
When I started to write this post, not all optimizations were reviewed and merged.</description>
    </item>
  </channel>
</rss>
